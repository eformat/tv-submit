apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  finalizers:
  - kubernetes.io/pvc-protection
  name: mzdata
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  volumeMode: Filesystem
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: schema
data:
  load.sql: |+
    CREATE SOURCE tripvibe
    FROM KAFKA BROKER 'tv-cluster-kafka-bootstrap:9092' TOPIC 'tripvibe'
    FORMAT TEXT;

    CREATE MATERIALIZED VIEW all_tripvibe AS
        SELECT (text::JSONB)->'location_lng' as location_lng,
               (text::JSONB)->'location_lat' as location_lat,
               CAST((text::JSONB)->'timestamp_created' AS timestamptz) as timestamp_created,
               CAST((text::JSONB)->'sentiment'->'departure_time' AS timestamptz) as departure_time,
               (text::JSONB)->'sentiment'->'vibe' as vibe,
               (text::JSONB)->'sentiment'->'capacity' as capacity,
               (text::JSONB)->'sentiment'->'route_direction' as route_direction,
               (text::JSONB)->'sentiment'->'route_type' as route_type,
               (text::JSONB)->'sentiment'->'route_number' as route_number,
               (text::JSONB)->'sentiment'->'stop_name' as stop_name,
               (text::JSONB)->'submitter'->'device_id' as device_id
        FROM (SELECT * FROM tripvibe);

    CREATE SOURCE ptv_all_routes
    FROM FILE '/work/tv-submit-data/all_routes.json'
    FORMAT REGEX '^(?P<data>\{.*)$';

    CREATE MATERIALIZED VIEW all_routes AS
        SELECT CAST((data::JSONB)->'route_type' as int) as route_type,
               CAST((data::JSONB)->'route_id' as int) as route_id,
               (data::JSONB)->'route_name' as route_name,
               (data::JSONB)->'route_number' as route_number
        FROM ptv_all_routes;

    CREATE MATERIALIZED VIEW ROUTE216 AS
        SELECT CAST(location_lng AS float), CAST(location_lat AS float), CAST(vibe AS integer), CAST(capacity AS integer), route_direction, route_type, route_number, timestamp_created, departure_time, stop_name, device_id
        FROM all_tripvibe
        WHERE route_number = '"216"';

    CREATE MATERIALIZED VIEW ROUTE90 AS
        SELECT CAST(location_lng AS float), CAST(location_lat AS float), CAST(vibe AS integer), CAST(capacity AS integer), route_direction, route_type, route_number, timestamp_created, departure_time, stop_name, device_id
        FROM all_tripvibe
        WHERE route_number = '"90"';
---
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  labels:
    app: materialize
  name: materialize
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    app: materialize
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: materialize
    spec:
      initContainers:
        - name: clean
          image: registry.redhat.io/ubi8/ubi:latest
          command: [sh, -c]
          args:
            - 'rm -f /work/mzdata/catalog'
          volumeMounts:
          - mountPath: /work/mzdata
            name: mzdata
      containers:
      - command:
        - /usr/local/bin/materialized
        - --w=2
        env:
        - name: PATH
          value: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        - name: TERM
          value: xterm
        - name: container
          value: oci
        - name: HOSTNAME
          value: materalize
        image: quay.io/eformat/materialize-pod:latest
        name: materialize-pod
        resources: {}
        securityContext: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /work/mzdata
          name: mzdata
        workingDir: /work
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      test: false
      triggers:
      - type: ConfigChange
      volumes:
      - name: mzdata
        persistentVolumeClaim:
          claimName: mzdata
      - configMap:
          defaultMode: 420
          name: schema
        name: schema
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: materialize
  name: materialize
spec:
  ports:
  - name: psql
    port: 6875
    protocol: TCP
    targetPort: 6875
  selector:
    app: materialize
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: load-schema
spec:
  template:
    spec:
      initContainers:
        - name: waitdb
          image: registry.redhat.io/rhel8/postgresql-96:latest
          command: ['sh', '-c', "until nslookup materialize.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for materialize service; sleep 2; done"]
      containers:
        - name: schema-load
          image: registry.redhat.io/rhel8/postgresql-96:latest
          command: [sh, -c]
          args:
            - psql -h materialize -p 6875 materialize -f /tmp/schema/load.sql
          volumeMounts:
            - mountPath: /tmp/schema/load.sql
              name: schema
              subPath: load.sql
      restartPolicy: Never
      volumes:
        - configMap:
            defaultMode: 420
            name: schema
          name: schema
  backoffLimit: 3
